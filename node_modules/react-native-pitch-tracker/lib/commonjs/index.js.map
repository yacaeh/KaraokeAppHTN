{"version":3,"sources":["index.tsx"],"names":["PitchTracker","NativeModules","eventEmitter","NativeEventEmitter","askPermission","permission","Platform","select","android","PERMISSIONS","ANDROID","RECORD_AUDIO","ios","IOS","MICROPHONE","result","RESULTS","GRANTED","console","log","error","prepare","noteOn","callback","addListener","noteOff"],"mappings":";;;;;;;AAAA;;AACA;;AAUA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,0BAAzB;AACA,MAAMC,YAAY,GAAG,IAAIC,+BAAJ,CAAuBH,YAAvB,CAArB;;AAEA,MAAMI,aAAa,GAAG,YAAY;AAChC,MAAI;AACF,QAAIC,UAAU,GAAGC,sBAASC,MAAT,CAAgB;AAC/BC,MAAAA,OAAO,EAAEC,oCAAYC,OAAZ,CAAoBC,YADE;AAE/BC,MAAAA,GAAG,EAAEH,oCAAYI,GAAZ,CAAgBC;AAFU,KAAhB,CAAjB;;AAIA,UAAMC,MAAM,GAAG,MAAM,qCAAQV,UAAR,CAArB;;AACA,QAAIU,MAAM,KAAKC,gCAAQC,OAAvB,EAAgC;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACD;AACF,GATD,CASE,OAAOC,KAAP,EAAc;AACdF,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,KAA7B;AACD;AACF,CAbD;;eAee,EACb,GAAGpB,YADU;AAEbqB,EAAAA,OAAO,EAAE,MAAM;AACbjB,IAAAA,aAAa;AACbJ,IAAAA,YAAY,CAACqB,OAAb;AACD,GALY;AAMbC,EAAAA,MAAM,EAAGC,QAAD,IAAoC;AAC1CrB,IAAAA,YAAY,CAACsB,WAAb,CAAyB,QAAzB,EAAmCD,QAAnC;AACD,GARY;AASbE,EAAAA,OAAO,EAAGF,QAAD,IAAoC;AAC3CrB,IAAAA,YAAY,CAACsB,WAAb,CAAyB,SAAzB,EAAoCD,QAApC;AACD;AAXY,C","sourcesContent":["import { NativeEventEmitter, NativeModules, Platform } from 'react-native';\nimport { request, PERMISSIONS, RESULTS } from 'react-native-permissions';\n\ntype PitchTrackerType = {\n  prepare(): any;\n  start(): any;\n  stop(): any;\n  noteOn(callback: (midiNum: any) => any): any;\n  noteOff(callback: (midiNum: any) => any): any;\n};\n\nconst { PitchTracker } = NativeModules;\nconst eventEmitter = new NativeEventEmitter(PitchTracker);\n\nconst askPermission = async () => {\n  try {\n    let permission = Platform.select({\n      android: PERMISSIONS.ANDROID.RECORD_AUDIO,\n      ios: PERMISSIONS.IOS.MICROPHONE,\n    })!;\n    const result = await request(permission);\n    if (result === RESULTS.GRANTED) {\n      console.log('Microphone Permission Successful');\n    }\n  } catch (error) {\n    console.log('askPermission', error);\n  }\n};\n\nexport default {\n  ...PitchTracker,\n  prepare: () => {\n    askPermission();\n    PitchTracker.prepare();\n  },\n  noteOn: (callback: (res: object) => any) => {\n    eventEmitter.addListener('NoteOn', callback);\n  },\n  noteOff: (callback: (res: object) => any) => {\n    eventEmitter.addListener('NoteOff', callback);\n  },\n} as PitchTrackerType;\n"]}